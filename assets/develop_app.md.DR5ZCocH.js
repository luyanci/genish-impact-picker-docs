import{_ as t,c as a,o as e,a1 as i}from"./chunks/framework.C0QrXM2i.js";const b=JSON.parse('{"title":"构建应用程序","description":"","frontmatter":{},"headers":[],"relativePath":"develop/app.md","filePath":"develop/app.md"}'),s={name:"develop/app.md"},d=i(`<h1 id="构建应用程序" tabindex="-1">构建应用程序 <a class="header-anchor" href="#构建应用程序" aria-label="Permalink to &quot;构建应用程序&quot;">​</a></h1><h2 id="本地构建" tabindex="-1">本地构建 <a class="header-anchor" href="#本地构建" aria-label="Permalink to &quot;本地构建&quot;">​</a></h2><h3 id="electron" tabindex="-1">Electron <a class="header-anchor" href="#electron" aria-label="Permalink to &quot;Electron&quot;">​</a></h3><p>通过在<a href="./frontend.html#构建">前端开发</a>的构建步骤中生成静态文件</p><p>然后将生成的静态文件 <code>.vercel/output/static</code> 手动拷贝到 <code>electron-static/static</code> 目录中，并覆盖原有文件。</p><p>最后进入 <code>electron-static</code> 目录执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 生成当前系统的可执行文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-win</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 生成 Windows x64 的可执行文件</span></span></code></pre></div><blockquote><p>如果在执行<code>npm install</code>时出现了electron相关的错误，可参考<a href="https://www.bilibili.com/read/mobile?id=4789160" target="_blank" rel="noreferrer">这篇文章</a>的方法来手动进行安装electron</p></blockquote><h3 id="tauri" tabindex="-1">Tauri <a class="header-anchor" href="#tauri" aria-label="Permalink to &quot;Tauri&quot;">​</a></h3><blockquote><p>在这之前，请按Tauri的<a href="https://tauri.app/v1/guides/getting-started/prerequisites" target="_blank" rel="noreferrer">文档</a>配置好相应软件，并确保在<a href="./frontend.html#安装依赖">前端开发</a>中已经安装好项目依赖</p></blockquote><p>在 <code>Genshin-Impact-Wish-Simulator</code> 目录下执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tauri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="通过github-action自动构建" tabindex="-1">通过Github Action自动构建 <a class="header-anchor" href="#通过github-action自动构建" aria-label="Permalink to &quot;通过Github Action自动构建&quot;">​</a></h2><p>如果因为一些原因而无法进行构建程序，可以通过CI的方式来进行构建</p><p>可直接点击action来使用相应的工作流</p><table><thead><tr><th>工作流名称</th><th>说明</th></tr></thead><tbody><tr><td>Build app</td><td>构建应用程序</td></tr><tr><td>Build app with Tauri</td><td>构建使用Tauri的应用程序</td></tr><tr><td>Page</td><td>构建页面</td></tr><tr><td>Release</td><td>发布Release</td></tr></tbody></table><p>CI配置文件在<code>.github/workflows</code>目录下</p><p>以下是相应的文件说明：</p><table><thead><tr><th>文件名</th><th>触发方式</th><th>说明</th></tr></thead><tbody><tr><td>page.yml</td><td>手动触发/连锁/对<code>Genshin-Impact-Wish-Simulator/src</code>文件夹内的文件进行commit提交或发PR</td><td>构建页面</td></tr><tr><td>app.yml</td><td>手动触发/连锁触发/对<code>electron-static</code> <code>Genshin-Impact-Wish-Simulator/src-tauri</code>或<code>Genshin-Impact-Wish-Simulator/src</code>文件夹内的文件进行commit或发PR</td><td>构建应用程序</td></tr><tr><td>tauri.yml</td><td>手动触发/连锁触发</td><td>构建使用Tauri打包的应用程序</td></tr><tr><td>release.yml</td><td>提交含<code>v**</code>的tag</td><td>发布Release</td></tr></tbody></table><blockquote><p>以上文件有存在相互调用的情况，这样子的话可以避免重复造轮</p></blockquote>`,20),r=[d];function l(h,n,o,p,c,k){return e(),a("div",null,r)}const F=t(s,[["render",l]]);export{b as __pageData,F as default};
